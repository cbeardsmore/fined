service: fined
app: fined
org: cbeardsmore

provider:
  name: aws
  runtime: python3.7
  region: us-east-1
  apiName: ${self:service}
  stage: ${opt:stage,'dev'}
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
  memorySize: 512
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'
  stackTags:
    PROJECT: ${self:service}

functions:
  fine:
    handler: fine.handle
    description: Fine a user a given amount.
    events:
      - http:
          path: fine
          method: post
    environment:
      SLACK_SIGNING_SECRET: ${ssm:/${self:service}/SLACK_SIGNING_SECRET~true}
  fines:
    handler: fines.handle
    description: List all user fines
    events:
      - http:
          path: fines
          method: post
    environment:
      SLACK_SIGNING_SECRET: ${ssm:/${self:service}/SLACK_SIGNING_SECRET~true}
  interaction:
    handler: interaction.handle
    description: Interactivity Endpoint for Slack Interactive Payloads
    events:
      - http:
          path: interaction
          method: post
    environment:
      SLACK_SIGNING_SECRET: ${ssm:/${self:service}/SLACK_SIGNING_SECRET~true}
      BOT_ACCESS_TOKEN: ${ssm:/${self:service}/BOT_ACCESS_TOKEN~true}

resources:
  Resources:
    finesTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: teamId
            AttributeType: S
        KeySchema:
          - AttributeName: teamId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
          
plugins:
  - serverless-python-requirements
